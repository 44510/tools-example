{
  "zh-cn": {
    "$name": "HTTP请求发送器",
    "$keywords": [
      "http",
      "请求",
      "发送",
      "测试",
      "获取",
      "提交",
      "删除",
      "修补",
      "放置",
      "HTTP 请求",
      "API 测试",
      "接口调试",
      "数据获取",
      "接口文档编写",
      "获取请求",
      "提交请求",
      "删除请求",
      "修补请求",
      "放置请求"
    ],
    "$description": "HTTP请求发送器是一种用于发送HTTP请求的工具。它允许用户设置请求参数、头信息和正文信息，以向指定的URL发送HTTP请求并接收响应结果。\n\n功能：\n\n1. 设置请求URL和方法：用户可以通过输入请求URL和选择请求方法（GET、POST、PATCH、DELETE、OPTION、HEAD）来设置请求信息。\n\n2. 设置请求参数：用户可以在Params选项卡中设置请求参数，支持JSON格式和键值对。\n\n3. 设置请求头：用户可以在Headers选项卡中设置请求头，支持JSON格式和键值对。\n\n4. 设置请求正文：用户可以在Body选项卡中设置请求正文，支持无、x-www-form-urlencoded、form-data和JSON格式。\n\n5. 设置授权信息：用户可以在Authorization选项卡中设置授权信息，支持无授权、Bearer Token和Basic Auth。\n\n6. 发送HTTP请求：用户可以单击发送按钮发送HTTP请求。\n\n7. 显示响应结果：该工具自动解析响应结果，并在Body选项卡中显示JSON或HTML格式，并在Headers选项卡中显示响应头信息。\n\n用例：\n\n1. API开发和测试：开发人员在开发或测试API时经常需要发送HTTP请求并查看响应结果。使用HTTP请求发送器工具可以快速轻松地发送HTTP请求并查看响应结果。\n\n2. 接口调试：在调试接口时，使用HTTP请求发送器工具可以快速轻松地发送HTTP请求并查看响应结果，从而快速定位问题。\n\n3. 数据分析：数据分析师需要从各种数据源获取数据，包括HTTP接口。使用HTTP请求发送器工具可以快速轻松地发送HTTP请求并获取数据。\n\n4. 接口文档编写：在编写接口文档时，需要提供请求参数、头信息和正文等信息。使用HTTP请求发送器工具可以快速轻松地获取接口的请求信息。"
  },
  "zh-tw": {
    "$name": "HTTP 請求發送器",
    "$keywords": [
      "http",
      "request",
      "send",
      "test",
      "get",
      "post",
      "delete",
      "patch",
      "put",
      "HTTP 請求",
      "API 測試",
      "介面除錯",
      "資料取得",
      "介面文件撰寫",
      "GET 請求",
      "POST 請求",
      "DELETE 請求",
      "PATCH 請求",
      "PUT 請求"
    ],
    "$description": "HTTP Request Sender 是一個用於發送 HTTP 請求的工具。它允許用戶設置請求參數、標頭和主體信息，以發送 HTTP 請求到指定的 URL 並接收響應結果。\n\n功能：\n\n1. 設置請求 URL 和方法：用戶可以通過輸入請求 URL 和選擇請求方法（GET、POST、PATCH、DELETE、OPTION、HEAD）來設置請求信息。\n\n2. 設置請求參數：用戶可以在 Params 標籤中設置請求參數，支持 JSON 格式和鍵值對。\n\n3. 設置請求標頭：用戶可以在 Headers 標籤中設置請求標頭，支持 JSON 格式和鍵值對。\n\n4. 設置請求主體：用戶可以在 Body 標籤中設置請求主體，支持 none、x-www-form-urlencoded、form-data 和 JSON 格式。\n\n5. 設置授權信息：用戶可以在 Authorization 標籤中設置授權信息，支持 No Auth、Bearer Token 和 Basic Auth。\n\n6. 發送 HTTP 請求：用戶可以點擊發送按鈕來發送 HTTP 請求。\n\n7. 顯示響應結果：該工具自動解析響應結果，並在 Body 標籤中顯示 JSON 或 HTML 格式，並在 Headers 標籤中顯示響應標頭信息。\n\n用例：\n\n1. API 開發和測試：開發人員在開發或測試 API 時經常需要發送 HTTP 請求並查看響應結果。使用 HTTP Request Sender 工具可以快速輕鬆地發送 HTTP 請求並查看響應結果。\n\n2. 接口調試：在調試接口時，使用 HTTP Request Sender 工具可以快速輕鬆地發送 HTTP 請求並查看響應結果，從而快速定位問題。\n\n3. 數據分析：數據分析師需要從各種數據源（包括 HTTP 接口）獲取數據。使用 HTTP Request Sender 工具可以快速輕鬆地發送 HTTP 請求並獲取數據。\n\n4. 接口文檔編寫：在編寫接口文檔時，需要提供請求參數、標頭和主體等信息。使用 HTTP Request Sender 工具可以快速輕鬆地獲取接口的請求信息。"
  },
  "es": {
    "$name": "HTTP Request Sender",
    "$keywords": [
      "http",
      "solicitud",
      "enviar",
      "prueba",
      "obtener",
      "publicar",
      "eliminar",
      "parche",
      "poner",
      "solicitud HTTP",
      "pruebas de API",
      "depuración de interfaz",
      "adquisición de datos",
      "escritura de documentos de interfaz",
      "solicitud GET",
      "solicitud POST",
      "solicitud DELETE",
      "solicitud PATCH",
      "solicitud PUT"
    ],
    "$description": "El HTTP Request Sender es una herramienta utilizada para enviar solicitudes HTTP. Permite a los usuarios establecer parámetros de solicitud, encabezados e información del cuerpo para enviar solicitudes HTTP a una URL especificada y recibir resultados de respuesta.\n\nCaracterísticas:\n\n1. Establecer URL y método de solicitud: Los usuarios pueden establecer información de solicitud ingresando la URL de solicitud y seleccionando el método de solicitud (GET, POST, PATCH, DELETE, OPTION, HEAD).\n\n2. Establecer parámetros de solicitud: Los usuarios pueden establecer parámetros de solicitud en la pestaña Params, admitiendo formato JSON y pares clave-valor.\n\n3. Establecer encabezados de solicitud: Los usuarios pueden establecer encabezados de solicitud en la pestaña Headers, admitiendo formato JSON y pares clave-valor.\n\n4. Establecer cuerpo de solicitud: Los usuarios pueden establecer el cuerpo de la solicitud en la pestaña Body, admitiendo formatos none, x-www-form-urlencoded, form-data y JSON.\n\n5. Establecer información de autorización: Los usuarios pueden establecer información de autorización en la pestaña Authorization, admitiendo No Auth, Bearer Token y Basic Auth.\n\n6. Enviar solicitud HTTP: Los usuarios pueden hacer clic en el botón Enviar para enviar solicitudes HTTP.\n\n7. Mostrar resultados de respuesta: La herramienta analiza automáticamente los resultados de respuesta y muestra el formato JSON o HTML en la pestaña Body, y muestra la información del encabezado de respuesta en la pestaña Headers.\n\nCasos de uso:\n\n1. Desarrollo y prueba de API: Los desarrolladores a menudo necesitan enviar solicitudes HTTP y ver los resultados de respuesta al desarrollar o probar APIs. Usando la herramienta HTTP Request Sender, pueden enviar solicitudes HTTP y ver los resultados de respuesta de manera rápida y fácil.\n\n2. Depuración de interfaz: Al depurar interfaces, usar la herramienta HTTP Request Sender puede enviar solicitudes HTTP y ver los resultados de respuesta de manera rápida y fácil, lo que permite localizar rápidamente problemas.\n\n3. Análisis de datos: Los analistas de datos necesitan obtener datos de varias fuentes de datos, incluidas las interfaces HTTP. Usando la herramienta HTTP Request Sender, pueden enviar solicitudes HTTP y obtener datos de manera rápida y fácil.\n\n4. Escritura de documentos de interfaz: Al escribir documentos de interfaz, es necesario proporcionar información como parámetros de solicitud, encabezados y cuerpo. Usando la herramienta HTTP Request Sender, pueden obtener información de solicitud para interfaces de manera rápida y fácil."
  },
  "ja": {
    "$name": "HTTPリクエスト送信ツール",
    "$keywords": [
      "http",
      "request",
      "send",
      "test",
      "get",
      "post",
      "delete",
      "patch",
      "put",
      "HTTPリクエスト",
      "APIテスト",
      "インターフェースデバッグ",
      "データ取得",
      "インターフェースドキュメント作成",
      "GETリクエスト",
      "POSTリクエスト",
      "DELETEリクエスト",
      "PATCHリクエスト",
      "PUTリクエスト"
    ],
    "$description": "HTTPリクエスト送信ツールは、HTTPリクエストを送信するために使用されるツールです。ユーザーは、リクエストパラメータ、ヘッダー、およびボディ情報を設定して、指定されたURLにHTTPリクエストを送信し、レスポンス結果を受信することができます。\n\n機能：\n\n1. リクエストURLとメソッドの設定：ユーザーは、リクエストURLを入力し、リクエストメソッド（GET、POST、PATCH、DELETE、OPTION、HEAD）を選択してリクエスト情報を設定できます。\n\n2. リクエストパラメータの設定：ユーザーは、Paramsタブでリクエストパラメータを設定できます。JSON形式とキーと値のペアをサポートしています。\n\n3. リクエストヘッダーの設定：ユーザーは、Headersタブでリクエストヘッダーを設定できます。JSON形式とキーと値のペアをサポートしています。\n\n4. リクエストボディの設定：ユーザーは、Bodyタブでリクエストボディを設定できます。none、x-www-form-urlencoded、form-data、およびJSON形式をサポートしています。\n\n5. 認証情報の設定：ユーザーは、Authorizationタブで認証情報を設定できます。No Auth、Bearer Token、およびBasic Authをサポートしています。\n\n6. HTTPリクエストの送信：ユーザーは、SendボタンをクリックしてHTTPリクエストを送信できます。\n\n7. レスポンス結果の表示：ツールは自動的にレスポンス結果を解析し、JSONまたはHTML形式をBodyタブに表示し、レスポンスヘッダー情報をHeadersタブに表示します。\n\n使用例：\n\n1. APIの開発とテスト：開発者は、APIを開発またはテストする際に、HTTPリクエストを送信してレスポンス結果を表示する必要があります。HTTPリクエスト送信ツールを使用すると、HTTPリクエストを迅速かつ簡単に送信し、レスポンス結果を表示できます。\n\n2. インターフェースのデバッグ：インターフェースのデバッグ時に、HTTPリクエスト送信ツールを使用すると、HTTPリクエストを迅速かつ簡単に送信し、レスポンス結果を表示して、問題を迅速に特定できます。\n\n3. データ分析：データアナリストは、HTTPインターフェースを含むさまざまなデータソースからデータを取得する必要があります。HTTPリクエスト送信ツールを使用すると、HTTPリクエストを迅速かつ簡単に送信し、データを取得できます。\n\n4. インターフェースドキュメントの作成：インターフェースドキュメントを作成する際には、リクエストパラメータ、ヘッダー、およびボディなどの情報を提供する必要があります。HTTPリクエスト送信ツールを使用すると、インターフェースのリクエスト情報を迅速かつ簡単に取得できます。"
  },
  "ko": {
    "$name": "HTTP 요청 보내기",
    "$keywords": [
      "http",
      "request",
      "send",
      "test",
      "get",
      "post",
      "delete",
      "patch",
      "put",
      "HTTP 요청",
      "API 테스트",
      "인터페이스 디버깅",
      "데이터 획득",
      "인터페이스 문서 작성",
      "GET 요청",
      "POST 요청",
      "DELETE 요청",
      "PATCH 요청",
      "PUT 요청"
    ],
    "$description": "HTTP 요청 보내기(Sender)는 HTTP 요청을 보내는 데 사용되는 도구입니다. 사용자는 요청 매개변수, 헤더 및 본문 정보를 설정하여 지정된 URL로 HTTP 요청을 보내고 응답 결과를 받을 수 있습니다.\n\n기능:\n\n1. 요청 URL 및 메소드 설정: 사용자는 요청 URL을 입력하고 요청 메소드(GET, POST, PATCH, DELETE, OPTION, HEAD)를 선택하여 요청 정보를 설정할 수 있습니다.\n\n2. 요청 매개변수 설정: 사용자는 Params 탭에서 요청 매개변수를 설정할 수 있으며, JSON 형식과 키-값 쌍을 지원합니다.\n\n3. 요청 헤더 설정: 사용자는 Headers 탭에서 요청 헤더를 설정할 수 있으며, JSON 형식과 키-값 쌍을 지원합니다.\n\n4. 요청 본문 설정: 사용자는 Body 탭에서 요청 본문을 설정할 수 있으며, none, x-www-form-urlencoded, form-data 및 JSON 형식을 지원합니다.\n\n5. 인증 정보 설정: 사용자는 Authorization 탭에서 No Auth, Bearer Token 및 Basic Auth를 지원하는 인증 정보를 설정할 수 있습니다.\n\n6. HTTP 요청 보내기: 사용자는 Send 버튼을 클릭하여 HTTP 요청을 보낼 수 있습니다.\n\n7. 응답 결과 표시: 도구는 자동으로 응답 결과를 구문 분석하고 Body 탭에서 JSON 또는 HTML 형식으로 표시하며, Headers 탭에서 응답 헤더 정보를 표시합니다.\n\n사용 사례:\n\n1. API 개발 및 테스트: 개발자는 API를 개발하거나 테스트할 때 HTTP 요청을 보내고 응답 결과를 볼 필요가 있습니다. HTTP 요청 보내기 도구를 사용하면 HTTP 요청을 빠르고 쉽게 보내고 응답 결과를 볼 수 있습니다.\n\n2. 인터페이스 디버깅: 인터페이스 디버깅 시 HTTP 요청을 빠르고 쉽게 보내고 응답 결과를 볼 수 있으므로 문제를 빠르게 찾을 수 있습니다.\n\n3. 데이터 분석: 데이터 분석가는 HTTP 인터페이스를 포함한 다양한 데이터 소스에서 데이터를 얻어야 합니다. HTTP 요청 보내기 도구를 사용하면 HTTP 요청을 빠르고 쉽게 보내고 데이터를 얻을 수 있습니다.\n\n4. 인터페이스 문서 작성: 인터페이스 문서를 작성할 때 요청 매개변수, 헤더 및 본문과 같은 정보를 제공해야 합니다. HTTP 요청 보내기 도구를 사용하면 인터페이스에 대한 요청 정보를 빠르고 쉽게 얻을 수 있습니다."
  },
  "de": {
    "$name": "HTTP Request Sender",
    "$keywords": [
      "http",
      "Anfrage",
      "senden",
      "testen",
      "erhalten",
      "posten",
      "löschen",
      "patchen",
      "setzen",
      "HTTP-Anfrage",
      "API-Testen",
      "Schnittstellendebugging",
      "Datenbeschaffung",
      "Schnittstellendokumentation schreiben",
      "GET-Anfrage",
      "POST-Anfrage",
      "DELETE-Anfrage",
      "PATCH-Anfrage",
      "PUT-Anfrage"
    ],
    "$description": "HTTP Request Sender ist ein Tool, das verwendet wird, um HTTP-Anfragen zu senden. Es ermöglicht Benutzern, Anfrageparameter, Header und Body-Informationen festzulegen, um HTTP-Anfragen an eine bestimmte URL zu senden und Antwortergebnisse zu erhalten.\n\nFunktionen:\n\n1. Setzen Sie die Anfrage-URL und -Methode: Benutzer können Anfrageinformationen eingeben, indem sie die Anfrage-URL festlegen und die Anfrage-Methode (GET, POST, PATCH, DELETE, OPTION, HEAD) auswählen.\n\n2. Setzen Sie Anfrageparameter: Benutzer können Anfrageparameter im Register \"Params\" festlegen, die JSON-Format und Schlüssel-Wert-Paare unterstützen.\n\n3. Setzen Sie Anfrage-Header: Benutzer können Anfrage-Header im Register \"Headers\" festlegen, die JSON-Format und Schlüssel-Wert-Paare unterstützen.\n\n4. Setzen Sie Anfrage-Body: Benutzer können Anfrage-Body im Register \"Body\" festlegen, der keine, x-www-form-urlencoded, form-data und JSON-Formate unterstützt.\n\n5. Setzen Sie Autorisierungsinformationen: Benutzer können Autorisierungsinformationen im Register \"Authorization\" festlegen, die No Auth, Bearer Token und Basic Auth unterstützen.\n\n6. Senden Sie HTTP-Anfrage: Benutzer können auf die Schaltfläche \"Senden\" klicken, um HTTP-Anfragen zu senden.\n\n7. Anzeigen von Antwortergebnissen: Das Tool analysiert automatisch die Antwortergebnisse und zeigt das JSON- oder HTML-Format im Register \"Body\" an und zeigt die Antwort-Header-Informationen im Register \"Headers\" an.\n\nAnwendungsfälle:\n\n1. API-Entwicklung und -Test: Entwickler müssen oft HTTP-Anfragen senden und Antwortergebnisse anzeigen, wenn sie APIs entwickeln oder testen. Mit dem HTTP Request Sender-Tool können HTTP-Anfragen schnell und einfach gesendet und Antwortergebnisse angezeigt werden.\n\n2. Schnittstellen-Debugging: Beim Debuggen von Schnittstellen kann das HTTP Request Sender-Tool schnell und einfach HTTP-Anfragen senden und Antwortergebnisse anzeigen, um Probleme schnell zu lokalisieren.\n\n3. Datenanalyse: Datenanalysten müssen Daten aus verschiedenen Datenquellen abrufen, einschließlich HTTP-Schnittstellen. Mit dem HTTP Request Sender-Tool können HTTP-Anfragen schnell und einfach gesendet und Daten abgerufen werden.\n\n4. Schreiben von Schnittstellendokumenten: Beim Schreiben von Schnittstellendokumenten müssen Informationen wie Anfrageparameter, Header und Body bereitgestellt werden. Mit dem HTTP Request Sender-Tool können schnell und einfach Anfrageinformationen für Schnittstellen abgerufen werden."
  },
  "fr": {
    "$name": "HTTP Request Sender",
    "$keywords": [
      "http",
      "requête",
      "envoyer",
      "test",
      "obtenir",
      "poster",
      "supprimer",
      "patch",
      "mettre",
      "requête HTTP",
      "test d'API",
      "débogage d'interface",
      "acquisition de données",
      "écriture de document d'interface",
      "requête GET",
      "requête POST",
      "requête DELETE",
      "requête PATCH",
      "requête PUT"
    ],
    "$description": "Le HTTP Request Sender est un outil utilisé pour envoyer des requêtes HTTP. Il permet aux utilisateurs de définir les paramètres de la requête, les en-têtes et les informations du corps pour envoyer des requêtes HTTP à une URL spécifiée et recevoir les résultats de la réponse.\n\nFonctionnalités :\n\n1. Définir l'URL et la méthode de la requête : Les utilisateurs peuvent définir les informations de la requête en entrant l'URL de la requête et en sélectionnant la méthode de requête (GET, POST, PATCH, DELETE, OPTION, HEAD).\n\n2. Définir les paramètres de la requête : Les utilisateurs peuvent définir les paramètres de la requête dans l'onglet Params, en prenant en charge le format JSON et les paires clé-valeur.\n\n3. Définir les en-têtes de la requête : Les utilisateurs peuvent définir les en-têtes de la requête dans l'onglet Headers, en prenant en charge le format JSON et les paires clé-valeur.\n\n4. Définir le corps de la requête : Les utilisateurs peuvent définir le corps de la requête dans l'onglet Body, en prenant en charge les formats none, x-www-form-urlencoded, form-data et JSON.\n\n5. Définir les informations d'autorisation : Les utilisateurs peuvent définir les informations d'autorisation dans l'onglet Authorization, en prenant en charge No Auth, Bearer Token et Basic Auth.\n\n6. Envoyer une requête HTTP : Les utilisateurs peuvent cliquer sur le bouton Envoyer pour envoyer des requêtes HTTP.\n\n7. Afficher les résultats de la réponse : L'outil analyse automatiquement les résultats de la réponse et affiche le format JSON ou HTML dans l'onglet Body, et affiche les informations d'en-tête de réponse dans l'onglet Headers.\n\nCas d'utilisation :\n\n1. Développement et test d'API : Les développeurs ont souvent besoin d'envoyer des requêtes HTTP et de visualiser les résultats de la réponse lors du développement ou du test d'API. L'utilisation de l'outil HTTP Request Sender peut permettre d'envoyer rapidement et facilement des requêtes HTTP et de visualiser les résultats de la réponse.\n\n2. Débogage d'interface : Lors du débogage d'interfaces, l'utilisation de l'outil HTTP Request Sender peut permettre d'envoyer rapidement et facilement des requêtes HTTP et de visualiser les résultats de la réponse, permettant ainsi de localiser rapidement les problèmes.\n\n3. Analyse de données : Les analystes de données ont besoin d'obtenir des données à partir de différentes sources de données, y compris des interfaces HTTP. L'utilisation de l'outil HTTP Request Sender peut permettre d'envoyer rapidement et facilement des requêtes HTTP et d'obtenir des données.\n\n4. Rédaction de documents d'interface : Lors de la rédaction de documents d'interface, il est nécessaire de fournir des informations telles que les paramètres de requête, les en-têtes et le corps. L'utilisation de l'outil HTTP Request Sender peut permettre d'obtenir rapidement et facilement des informations de requête pour les interfaces."
  },
  "it": {
    "$name": "HTTP Request Sender",
    "$keywords": [
      "http",
      "richiesta",
      "invia",
      "test",
      "ottenere",
      "postare",
      "eliminare",
      "patch",
      "mettere",
      "richiesta HTTP",
      "test API",
      "debug dell'interfaccia",
      "acquisizione dati",
      "scrittura di documenti dell'interfaccia",
      "richiesta GET",
      "richiesta POST",
      "richiesta DELETE",
      "richiesta PATCH",
      "richiesta PUT"
    ],
    "$description": "Il \"HTTP Request Sender\" è uno strumento utilizzato per inviare richieste HTTP. Consente agli utenti di impostare i parametri della richiesta, gli header e le informazioni del corpo per inviare richieste HTTP a un URL specifico e ricevere i risultati della risposta.\n\nCaratteristiche:\n\n1. Impostare l'URL e il metodo della richiesta: gli utenti possono impostare le informazioni della richiesta inserendo l'URL della richiesta e selezionando il metodo della richiesta (GET, POST, PATCH, DELETE, OPTION, HEAD).\n\n2. Impostare i parametri della richiesta: gli utenti possono impostare i parametri della richiesta nella scheda Params, supportando il formato JSON e le coppie chiave-valore.\n\n3. Impostare gli header della richiesta: gli utenti possono impostare gli header della richiesta nella scheda Headers, supportando il formato JSON e le coppie chiave-valore.\n\n4. Impostare il corpo della richiesta: gli utenti possono impostare il corpo della richiesta nella scheda Body, supportando i formati none, x-www-form-urlencoded, form-data e JSON.\n\n5. Impostare le informazioni di autorizzazione: gli utenti possono impostare le informazioni di autorizzazione nella scheda Authorization, supportando No Auth, Bearer Token e Basic Auth.\n\n6. Invio della richiesta HTTP: gli utenti possono fare clic sul pulsante Invia per inviare le richieste HTTP.\n\n7. Visualizzazione dei risultati della risposta: lo strumento analizza automaticamente i risultati della risposta e visualizza il formato JSON o HTML nella scheda Body e visualizza le informazioni dell'header della risposta nella scheda Headers.\n\nCasi d'uso:\n\n1. Sviluppo e test delle API: gli sviluppatori spesso devono inviare richieste HTTP e visualizzare i risultati della risposta durante lo sviluppo o il test delle API. Utilizzando lo strumento HTTP Request Sender, è possibile inviare rapidamente e facilmente richieste HTTP e visualizzare i risultati della risposta.\n\n2. Debugging dell'interfaccia: durante il debugging delle interfacce, utilizzando lo strumento HTTP Request Sender, è possibile inviare rapidamente e facilmente richieste HTTP e visualizzare i risultati della risposta, individuando così rapidamente i problemi.\n\n3. Analisi dei dati: gli analisti dei dati devono ottenere dati da varie fonti di dati, inclusi gli interfacce HTTP. Utilizzando lo strumento HTTP Request Sender, è possibile inviare rapidamente e facilmente richieste HTTP e ottenere dati.\n\n4. Scrittura di documenti di interfaccia: durante la scrittura di documenti di interfaccia, è necessario fornire informazioni come i parametri della richiesta, gli header e il corpo. Utilizzando lo strumento HTTP Request Sender, è possibile ottenere rapidamente e facilmente le informazioni di richiesta per le interfacce."
  },
  "ru": {
    "$name": "Отправитель HTTP-запросов",
    "$keywords": [
      "http",
      "запрос",
      "отправить",
      "тест",
      "получить",
      "отправить",
      "удалить",
      "патч",
      "положить",
      "HTTP запрос",
      "тестирование API",
      "отладка интерфейса",
      "сбор данных",
      "написание документации интерфейса",
      "GET запрос",
      "POST запрос",
      "DELETE запрос",
      "PATCH запрос",
      "PUT запрос"
    ],
    "$description": "HTTP Request Sender - это инструмент, используемый для отправки HTTP-запросов. Он позволяет пользователям устанавливать параметры запроса, заголовки и информацию о теле запроса для отправки HTTP-запросов на указанный URL и получения результатов ответа.\n\nОсобенности:\n\n1. Установка URL и метода запроса: Пользователи могут установить информацию запроса, введя URL запроса и выбрав метод запроса (GET, POST, PATCH, DELETE, OPTION, HEAD).\n\n2. Установка параметров запроса: Пользователи могут установить параметры запроса во вкладке Params, поддерживая формат JSON и пары ключ-значение.\n\n3. Установка заголовков запроса: Пользователи могут установить заголовки запроса во вкладке Headers, поддерживая формат JSON и пары ключ-значение.\n\n4. Установка тела запроса: Пользователи могут установить тело запроса во вкладке Body, поддерживая форматы none, x-www-form-urlencoded, form-data и JSON.\n\n5. Установка информации авторизации: Пользователи могут установить информацию авторизации во вкладке Authorization, поддерживая No Auth, Bearer Token и Basic Auth.\n\n6. Отправка HTTP-запроса: Пользователи могут нажать кнопку Отправить, чтобы отправить HTTP-запросы.\n\n7. Отображение результатов ответа: Инструмент автоматически разбирает результаты ответа и отображает формат JSON или HTML во вкладке Body, а также отображает информацию о заголовке ответа во вкладке Headers.\n\nПрименение:\n\n1. Разработка и тестирование API: Разработчики часто должны отправлять HTTP-запросы и просматривать результаты ответа при разработке или тестировании API. Использование инструмента HTTP Request Sender может быстро и легко отправлять HTTP-запросы и просматривать результаты ответа.\n\n2. Отладка интерфейсов: При отладке интерфейсов использование инструмента HTTP Request Sender может быстро и легко отправлять HTTP-запросы и просматривать результаты ответа, тем самым быстро находя проблемы.\n\n3. Анализ данных: Аналитики данных должны получать данные из различных источников данных, включая HTTP-интерфейсы. Использование инструмента HTTP Request Sender может быстро и легко отправлять HTTP-запросы и получать данные.\n\n4. Написание документации по интерфейсу: При написании документации по интерфейсу необходимо предоставлять информацию, такую как параметры запроса, заголовки и тело. Использование инструмента HTTP Request Sender может быстро и легко получать информацию запроса для интерфейсов."
  },
  "pt": {
    "$name": "Enviador de Requisições HTTP",
    "$keywords": [
      "http",
      "pedido",
      "enviar",
      "teste",
      "obter",
      "postar",
      "excluir",
      "remendar",
      "colocar",
      "pedido HTTP",
      "teste de API",
      "depuração de interface",
      "aquisição de dados",
      "escrita de documento de interface",
      "pedido GET",
      "pedido POST",
      "pedido DELETE",
      "pedido PATCH",
      "pedido PUT"
    ],
    "$description": "O HTTP Request Sender é uma ferramenta usada para enviar requisições HTTP. Ele permite que os usuários definam parâmetros de requisição, cabeçalhos e informações de corpo para enviar requisições HTTP para uma URL especificada e receber resultados de resposta.\n\nRecursos:\n\n1. Definir URL e método de requisição: Os usuários podem definir informações de requisição inserindo a URL da requisição e selecionando o método de requisição (GET, POST, PATCH, DELETE, OPTION, HEAD).\n\n2. Definir parâmetros de requisição: Os usuários podem definir parâmetros de requisição na guia Parâmetros, suportando formatos JSON e pares chave-valor.\n\n3. Definir cabeçalhos de requisição: Os usuários podem definir cabeçalhos de requisição na guia Cabeçalhos, suportando formatos JSON e pares chave-valor.\n\n4. Definir corpo de requisição: Os usuários podem definir o corpo da requisição na guia Corpo, suportando formatos nenhum, x-www-form-urlencoded, form-data e JSON.\n\n5. Definir informações de autorização: Os usuários podem definir informações de autorização na guia Autorização, suportando Sem Autenticação, Token Bearer e Autenticação Básica.\n\n6. Enviar requisição HTTP: Os usuários podem clicar no botão Enviar para enviar requisições HTTP.\n\n7. Exibir resultados de resposta: A ferramenta analisa automaticamente os resultados de resposta e exibe o formato JSON ou HTML na guia Corpo, e exibe as informações do cabeçalho de resposta na guia Cabeçalhos.\n\nCasos de uso:\n\n1. Desenvolvimento e teste de API: Os desenvolvedores frequentemente precisam enviar requisições HTTP e visualizar resultados de resposta ao desenvolver ou testar APIs. Usando a ferramenta HTTP Request Sender, é possível enviar rapidamente e facilmente requisições HTTP e visualizar resultados de resposta.\n\n2. Depuração de interface: Ao depurar interfaces, usando a ferramenta HTTP Request Sender, é possível enviar rapidamente e facilmente requisições HTTP e visualizar resultados de resposta, localizando rapidamente problemas.\n\n3. Análise de dados: Os analistas de dados precisam obter dados de várias fontes de dados, incluindo interfaces HTTP. Usando a ferramenta HTTP Request Sender, é possível enviar rapidamente e facilmente requisições HTTP e obter dados.\n\n4. Escrita de documentos de interface: Ao escrever documentos de interface, é necessário fornecer informações como parâmetros de requisição, cabeçalhos e corpo. Usando a ferramenta HTTP Request Sender, é possível obter rapidamente e facilmente informações de requisição para interfaces."
  },
  "en": {
    "$name": "HTTP Request Sender",
    "$keywords": [
      "http",
      "request",
      "send",
      "test",
      "get",
      "post",
      "delete",
      "patch",
      "put",
      "HTTP request",
      "API testing",
      "interface debugging",
      "data acquisition",
      "interface document writing",
      "GET request",
      "POST request",
      "DELETE request",
      "PATCH request",
      "PUT request"
    ],
    "$description": "HTTP Request Sender is a tool used to send HTTP requests. It allows users to set request parameters, headers, and body information to send HTTP requests to a specified URL and receive response results.\n\nFeatures:\n\n1. Set request URL and method: Users can set request information by entering the request URL and selecting the request method (GET, POST, PATCH, DELETE, OPTION, HEAD).\n\n2. Set request parameters: Users can set request parameters in the Params tab, supporting JSON format and key-value pairs.\n\n3. Set request headers: Users can set request headers in the Headers tab, supporting JSON format and key-value pairs.\n\n4. Set request body: Users can set request body in the Body tab, supporting none, x-www-form-urlencoded, form-data, and JSON formats.\n\n5. Set authorization information: Users can set authorization information in the Authorization tab, supporting No Auth, Bearer Token, and Basic Auth.\n\n6. Send HTTP request: Users can click the Send button to send HTTP requests.\n\n7. Display response results: The tool automatically parses the response results and displays the JSON or HTML format in the Body tab, and displays the response header information in the Headers tab.\n\nUse cases:\n\n1. API development and testing: Developers often need to send HTTP requests and view response results when developing or testing APIs. Using HTTP Request Sender tool can quickly and easily send HTTP requests and view response results.\n\n2. Interface debugging: When debugging interfaces, using HTTP Request Sender tool can quickly and easily send HTTP requests and view response results, thereby quickly locating problems.\n\n3. Data analysis: Data analysts need to obtain data from various data sources, including HTTP interfaces. Using HTTP Request Sender tool can quickly and easily send HTTP requests and obtain data.\n\n4. Interface document writing: When writing interface documents, it is necessary to provide information such as request parameters, headers, and body. Using HTTP Request Sender tool can quickly and easily obtain request information for interfaces."
  }
}